	SUBROUTINE NNLS(A,MDA,M,N,B,X,RNORM,W,ZZ,JINDEX,MODE,ITER)

c	VERSION A  14 JUNE 81  KOO,DAVID

c	FROM C.L. LAWSON AND R.J. HANSON, JPL 1973 JUNE 15

c	TO APPEARIN \SOLVING LEAST SQUARES PROBLEMS\
c	PRENTICE HALL 1974

c	**********   NONNEGATIVE LEAST SQUARES ************

c	GIVEN AN M BY N MATRIX, A, AND AN M-VECTOR, B, COMPUTE AN
c	N-VECTOR, X, WHICH SOLVES THE LEAST SQUARES PROBLEM
c	     A*X=B  SUBJECT TO X.GE.0

c	A( ),MDA,MN	MDA IS THE FIRST DIMENSIONING PARAMETERR FOR THE
c			ARRAY , A().   ON ENTRY A() CONTAINS THE M BY N
c			MATRIX,A.   ON EXIT  A() COTAINS THE PRODUCT
c			MATRIX  Q*A, WHERE Q IS AN M BY M ORTHOGONAL
c			MATRIX GENERATED IMPLICITLY BY THIS SUBROUTIE
c	B()	ON ENTRY B() CONTAINS THE M-VECTOR , B.  ON EXIT B()
c		CONTAINS  Q*B
c	X()	ON ENTRY X() NEED NOT BE INITIALIZED.  ON EXIT X WILL
c		CONTAIN THE SOLUTION VECTOR
c	RNORM	ON EXIT RNORM CONTAINS THE EUCLIDIAN NORM OF THE
c		RESIDUAL VECTOR
c	W() 	AN N-ARRAY OF WORKING SPACE. ON EXIT W() WILL CONTAIN
c		THE DUAL SOLUTION VECTOR.  W WILL SATISFY W(I)=0. FOR
c		ALL I IN SET P AND W(I).LE.0. FOR ALL I IN SET Z
c	ZZ()	AN M-ARRAY OF WORKING SPACE
c	JINDEX()		AN INTEGER WORKING ARRAY OF LENGTH AT LEAST N.
c			ON EXIT THE CONTENTS OF THIS ARRAY DEFINE THE
c			SETS P AND Z AS FOLLOWS:
c			
c			JINDEX(1) THRU JINDEX (NSETP) = SET P
c			JINDEX(IZ1) THRU JINDEX(IZ2)  = SET  Z
c			IZ1 = NSETP + 1 =NPP1
c			IZ2 = N
c	MODE	THIS IA A SUCCESS-FAILURE FLAG WITH THE FOLL MEANINGS:
c		1	THE SOLUTION HAS BEEN COMPUTED SUCCESSFULLY
c		2	THE DIMENSIONS OF THE PROBLEM ARE BAD
c			EITHER M.LE.0 OR N.LE.0
c		3	ITERATION COUNTED EXCEEDED MORE THAN 3*N ITER


c	REQUIRED SUBROUTINES  H12,G1,G2,DIFF

	IMPLICIT REAL*4 (A-H,O-Z)
	DIMENSION A(MDA,N),B(M),X(N),W(N),ZZ(M)
	INTEGER JINDEX(N)
	ZERO= 0.0
	ONE = 1.0
	TWO = 2.0
	FACTOR = 0.01

	MODE = 1
	IF( M.GT.0.AND.N.GT.0) GO TO 10
	MODE = 2
	RETURN
10	ITER=0
	ITMAX=3*N


c			INITIALIZE THE ARRAYS JINDEX() AND X()
		DO 20 I=1,N
		X(I)=ZERO
20		JINDEX(I)=I

	IZ2=N
	IZ1=1
	NSETP=0
	NPP1=1
c			**** MAIN LOOP BEGINS HERE *****
30	CONTINUE
c		QUIT IF ALL COEFFICIENTS ARE ALREADY IN THE SOLUTION
c			OR IF M COLS OF A HAVE BEEN TRIANGULARIZED
	IF(IZ1.GT.IZ2.OR.NSETP.GE.M) GO TO 350

c		COMPUTE COMPONENTS OF THE DUAL (NEG GRADIENT) VECTOR W()

		DO 50 IZ=IZ1,IZ2
		J = JINDEX( IZ )
		SM = ZERO
			DO 40  L =NPP1,M
40			SM=SM+A(L,J)*B(L)
50		W(J) = SM
c				FIND LARGEST POSITIVE W(J)
60	WMAX=ZERO
		DO 70 IZ=IZ1,IZ2
		J=JINDEX(IZ)
		IF( W(J).LE.WMAX ) GO TO 70
		WMAX=W(J)
		IZMAX=IZ
70		CONTINUE

c			IF(WMAX.LE.0. GGO TO TERMINATION
c			THIS INDICATES SATISFACTION OF THE KUHN-TUCKER
c			CONDITIONS
	IF( WMAX )  350,350,80
80	IZ=IZMAX
	J=JINDEX(IZ)

c	THE SIGN OF W(J) IS OK FOR J TO BE MOVED TO SET P
c	BEGIN THE TRANSFORMATION AND CHECKNEW DIAGONAL ELEMENT TO
c	AVOID  NEAR LINEAR DEPENDENCE

	ASAVE=A(NPP1,J)
	CALL H12 (1,NPP1,NPP1+1,M,A(1,J),1,UP,DUMMY,1,1,0)
	UNORM=ZERO
	IF( NSETP.EQ.0 ) GO TO 100
		DO 90 L=1,NSETP
90		UNORM=UNORM+A(L,J)**2
100	UNORM=SQRT(UNORM)
	IF(DIFF(UNORM+ABS(A(NPP1,J))*FACTOR,UNORM)) 130,130,110

c	COL J IS SUFFICIENTLY INDEPENDENT.  COPY B INTO ZZ
c	UPDATE ZZ AND SOLVE FOR ZTEST (=PROPOSED NEW VAL FOR X(J) )

110		DO 120 L=1,M
120		ZZ(L)=B(L)
	CALL H12 (2,NPP1,NPP1+1,M,A(1,J),1,UP,ZZ,1,1,1)
	ZTEST=ZZ(NPP1)/A(NPP1,J)
c					SEE IF ZTEST IS POSITIVE
	IF(ZTEST)  130,130,140

c	REJECT J AS A CANDIDATE TO BE MOVED FROM SET Z TO SET P
c	RESTORE A(NPP1,J)   SET W(J)=0 AND LOOP BACK TO TEST DUAL
c	COEF AGAIN

130	A(NPP1,J)=ASAVE
	W(J)=ZERO
	GO TO 60

c	THE JINDEX J=JINDEX(IZ) HAS BEEN SELECTED TO BE MOVED FROM
c	SET Z TO SET P.   UPDATE B.  UPDATE INDICES.  APPLY HOUSEHOLDER
c	TRANSFORMATIONS TO COLS IN NEW SET Z.   ZERO SUBDIAGONAL ELTS
c	IN COL J.    SET W(J)=0.

140		DO 150  L=1,M
150		B(L)=ZZ(L)
	JINDEX(IZ)=JINDEX(IZ1)
	JINDEX(IZ1)=J
	IZ1=IZ1+1
	NSETP=NPP1
	NPP1=NPP1+1

	IF( IZ1.GT.IZ2 )  GO TO 170
		DO 160 JZ=IZ1,IZ2
		JJ=JINDEX(JZ)
160		CALL H12 (2,NSETP,NPP1,M,A(1,J),1,UP,A(1,JJ),1,MDA,1)
170	CONTINUE

		IF( NSETP.EQ.M ) GO TO 190
			DO 180 L=NPP1,M
180			A(L,J)=ZERO
190	CONTINUE

	W(J)=ZERO
c					SOLVE THE TRIANGULAR SYSTEM
c					STORE THE SOLU TEMPILY IN ZZ()
	ASSIGN 200 TO NEXT
	GO TO 400
200	CONTINUE
c			********* SECONDARY LOOP BEGINS HERE ******
c		ITERATION COUNTER
210	ITER=ITER+1
	IF( ITER.LE.ITMAX ) GO TO 220
	MODE=3
	WRITE(6,440)
	GO TO 350
220	CONTINUE
c			SEE IF ALL EW CONSTRAINED COEFF ARE FEASIBLE
c			IF NOT COMPUTE ALPHA
	ALPHA=TWO
		DO 240  IP=1,NSETP
		L=JINDEX(IP)
		IF (ZZ(IP))  230,230,240

230		T=-X(L)/(ZZ(IP)-X(L))
		IF(ALPHA.LE.T) GO TO 240
		ALPHA=T
		JJ=IP
240	CONTINUE

c		IF ALL NEW CONSTRAINED COEFF ARE FEASIBLE THE ALPHA
c		WILL STILL = 2.  IF SO EXIT FROM SECOND LOP TO MAIN LOP
	IF (ALPHA.EQ.TWO) GO TO 330

c		OTHERWISE USE ALPHA WHICH WILL BE BETWEEN 0. AND 1. TO
c		INTERPOLATE BETWEEN THE OLD X AND THE NEW ZZ.

		DO 250 IP=1,NSETP
		L=JINDEX(IP)
250	X(L)=X(L)+ALPHA*(ZZ(IP)-X(L))

c		MODIFY A AND B AND THE JINDEX ARRAYS TO MOVE COEFF I
c		FROM SET P TO SET Z
	I=JINDEX(JJ)
260	X(I)=ZERO

	IF (JJ.EQ.NSETP) GO TO 290
	JJ = JJ+1
		DO 280 J=JJ,NSETP
		II=JINDEX(J)
		JINDEX(J-1)=II
		CALL G1 (A(J-1,II),A(J,II),CC,SS,A(J-1,II))
		A(J,II)=ZERO
			DO 270 L=1,N
			IF(L.NE.II) CALL G2(CC,SS,A(J-1,L),A(J,L))
270			CONTINUE
280		CALL G2 (CC,SS,B(J-1),B(J))
290	NPP1=NSETP
	NSETP=NSETP-1
	IZ1=IZ1-1
	JINDEX(IZ1)=I

c		SEEIF THE REMAINING COEFFS IN SET P ARE FEASIBLE. THEY
c		SHOULD BE BECAUSE OF THE WAY ALPHA WAS DETERMINED.
c		IF ANY ARE INFEASIBLE IT IS DUE TO ROUND OFF ERROR.
c		ANY THAT ARE NONPOSITIVE WILL BE SET TO ZERO
c		AND MOVED FROM SET P TO SET Z

		DO 300 JJ=1,NSETP
		I=JINDEX(JJ)
		IF (X(I))  260,260,300
300		CONTINUE

c		COPY B() INTO ZZ()   THEN SOLVE AGAIN AND LOOP BACK

		DO 310 I=1,M
310		ZZ(I)=B(I)
	ASSIGN 320 TO NEXT
	GO TO 400
320	CONTINUE
	GO TO 210
c			********  END OF SECONDARY LOOP *****
330		DO 340 IP=1,NSETP
		I=JINDEX(IP)
340		X(I)=ZZ(IP)
c		ALL NEW COEFF ARE POSITIVE. LOOP BACK TO BEGINIING
	GO TO 30
c			*********  END OF MAIN LOOP   *******
c			COME TO HERE FOR TERMINATION
c			COMPUTE THE NORM OF THE FINAL RESIDUAL VECTOR

350	SM=ZERO
	IF (NPP1.GT.M) GO TO 370
		DO 360 I=NPP1,M
360		SM=SM+B(I)**2
	GO TO 390
370		DO 380 J=1,N
380		W(J)=ZERO
390	RNORM=SQRT(SM)
	RETURN

c		THE FOLLOWING BLOCK OF CODE IS USED AS AN INTERNAL
c		SUBROUTINE TO SOLVE THE TRIANGULAR SYSTEM. PUTING
c			THE SOLUTION INTO ZZ()
400		DO 430  L=1,NSETP
		IP=NSETP+1-L
		IF (L.EQ.1) GO TO 420
			DO 410 II=1,IP
410			ZZ(II)=ZZ(II)-A(II,JJ)*ZZ(IP+1)
420		JJ=JINDEX(IP)
430		ZZ(IP)=ZZ(IP)/A(IP,JJ)
	GO TO NEXT,  (200,320)
440	FORMAT (' NNLS QUITING ON ITERATION COUNT')
	END

	SUBROUTINE H12(MODE,LPIVOT,L1,M,U,IUE,UP,C,ICE,ICV,NCV)

c	VERSION A  14 JUNE 1981  KOO,DAVID
c	FROM C.L. LAWSON AND R.J. HANSON  JPL  1973 JUN 12
c	TO APPEAR IN ' SOLVING LEAST SQUARES PROBLEMS'  PRENTICE HALL
c	1974

c	CONSTRUCTION AND/OR APPLICATION OF A SINGLE HOUSEHOLDER
c	TRANSFORMATION   Q=I + U*(U**T)/B

c	MODE	=   1 OR 2 TO SELECT ALGORITHM H1 OR H2
c	LPIVOT 	IS THE JINDEX OF THE PIVOT ELEMENT
c	L1,M	IF( L1.LE. M  THE TRANSFORMATION WILL BE CONSTRUCTEED
c		TO ZERO ELEMENTS JINDEXED FROM L1 THROUG M.  IF L1.GT.M
c		THE SUBROUTINE DOES AN IDENTITY TRANSFORMATION
c	U(),IUE,UP	ON ENTRY TO H1  U() CONTAINS THE PIVOT VECTOR
c			IUE IS THE STORAGE INCREMENT BETWEEN ELEMENTS
c				ON EXIT FROM H1  U() AND UP
c			CONTAIN QUATITIES DEFINING THE VECTOR U OF THE
c			HOUSEHOLDER TRANSFORMATION.  ON ENTRY TO H2 U()
c			AND UP SHOULD CONTAIN QUANTITIES PREVIOUSLY
c			COMPUTED BY H1.  THESE WILL NOT BE MODIFD BY H2
c	C()	ON ENTRY TO H1 OR H2  C() CONTAINS A MATRIX WHICH WLL BE
c		REGARDED AS A SET OF VECTORS TO WHICH THE HOUSEHOLDER
c		TRANSFORMATION IS TO BE APPLIED.  ON EXIT C() CONTAINS
c		THE SET OF TRANSFORMED VECTORS
c	ICE	STORAGE INCREMENT BETWEEN ELEMENTS OF VECTORS IN C()
c	ICV	STORAGE INCREMENT BETWEEN VECTORS IN C()
c	NCV	NUMBER OF VECTORS IN C() TO BE TRANSFORMED.  IF
c		NCV.LE.0 NO OPERATIONS WILL BE DONE ON C()


	IMPLICIT REAL*4 (A-H,O-Z)
	DIMENSION U(IUE,M),C(M)
	DOUBLE PRECISION SM,B
	ONE=1.

	IF (0.GE.LPIVOT.OR.LPIVOT.GE.L1.OR.L1.GT.M) RETURN
	CL=ABS(U(1,LPIVOT))
	IF (MODE.EQ.2)  GO TO 60
c			***********  CONSTRUCT THE TRANSFORMATION  ****
		DO 10 J=L1,M
10		CL=AMAX1(ABS(U(1,J)),CL)
	IF (CL)  130,130,20
20	CLINV=ONE/CL
	SM=(DBLE(U(1,LPIVOT))*CLINV)**2
		DO 30 J=L1,M
30		SM=SM+(DBLE(U(1,J))*CLINV)**2
c			CONVERT DBLE. PREC. SM TO SINGL. PREC SM1
	SM1=SM
	CL=CL*SQRT(SM1)
	IF (U(1,LPIVOT))  50,50,40
40	CL=-CL
50	UP=U(1,LPIVOT)-CL
	U(1,LPIVOT)=CL
	GO TO 70
c		******  APPLY THE TRANSFORMATION I+U*(U**T)/B TO C **
60	IF (CL)  130,130,70
70	IF (NCV.LE.0) RETURN
	B=DBLE(UP)*U(1,LPIVOT)
c			*****B MUST BE NONPOSITVE HERE. IF B=0 RETURN
	IF (B) 80,130,130
80	B=ONE/B
	I2=1-ICV+ICE*(LPIVOT-1)
	INCR=ICE*(L1-LPIVOT)
		DO 120 J=1,NCV
		I2=I2+ICV
		I3=I2+INCR
		I4=I3
		SM=C(I2)*DBLE(UP)
			DO 90 I=L1,M
			SM=SM+C(I3)*DBLE(U(1,I))
90			I3=I3+ICE
		IF(SM)  100,120,100
100		SM=SM*B
		C(I2)=C(I2)+SM*DBLE(UP)
			DO 110 I=L1,M
			C(I4)=C(I4)+SM*DBLE(U(1,I))
110			I4=I4+ICE
120		CONTINUE
130	RETURN
	END

	SUBROUTINE G1(A,B,COS,SIN,SIG)

c	VERSON A   14 JUNE 1981  KOO,DAVID  G1,G2,DIFF

c	FROM C.L.LAWSON AND R.J. HANSON,  JPL 1973 JUN12
c	TO APPEAR IN ' SOLVING LEAST SQUARES PROBLEMS'
c			PRENTICE-HALL 1974

c	COMPUTE ORTHOGONAL ROTATION MATRIX
c	COMPUTE MATRIX    (C,S) SO THAT (C,S)(A)=(SQRT(A**2+B**2))
c			  (-S,C)        (-C,S) (B)    (0 )
c	COMPUTE SIG  = SQRT(A**2+B**2 )
c		SIG IS COMPUTED LAST TO ALLOW FOR THE POSSIBILITY
c		THAT SIG MAY BE IN THE SAME LOCATION AS A OR B

	IMPLICIT REAL*4 (A-H,O-Z)
	ZERO=0.
	ONE=1.
	IF (ABS(A).LE.ABS(B)) GO TO 10
	XR=B/A
	YR=SQRT(ONE+XR**2)
	COS=SIGN(ONE/YR,A)
	SIN=COS*XR
	SIG=ABS(A)*YR
	RETURN
10	IF (B)  20,30,20
20	XR=A/B
	YR=SQRT(ONE+XR**2)
	SIN=SIGN(ONE/YR,B)
	COS=SIN*XR
	SIG=ABS(B)*YR
	RETURN
30	SIG=ZERO
	COS=ZERO
	SIN=ONE
	RETURN
	END

	SUBROUTINE G2( COS,SIN,X,Y)
c 	APPLY THE ROTATION COMPUTED BY G1 TO(X,Y)
	IMPLICIT REAL*4 (A-H,O-Z)
	XR=COS*X+SIN*Y
	Y=-SIN*X+COS*Y
	X=XR
	RETURN
	END

	REAL*4 FUNCTION DIFF(X,Y)
	IMPLICIT REAL*4 (A-H,O-Z)
	DIFF=X-Y
	RETURN
	END
